/** Declaration file generated by dts-gen */

export = faye_websocket;

declare function faye_websocket(request: any, socket: any, body: any, protocols: any, options: any): any;

declare namespace faye_websocket {
    class Client {
        constructor(_url: any, protocols: any, options: any);

    }

    class EventSource {
        constructor(request: any, response: any, options: any);

        addEventListener(eventType: any, listener: any, useCapture: any): void;

        close(): any;

        dispatchEvent(event: any): void;

        end(message: any): void;

        ping(): any;

        removeEventListener(eventType: any, listener: any, useCapture: any): void;

        send(message: any, options: any): any;

        write(message: any): any;

        static isEventSource(request: any): any;

    }

    // Circular reference from faye_websocket
    const WebSocket: any;

    function isWebSocket(request: any): any;

    function validateOptions(options: any, validKeys: any): void;

    namespace Client {
        namespace prototype {
            const domain: any;

            const onclose: any;

            const onerror: any;

            const onmessage: any;

            const onopen: any;

            function addEventListener(eventType: any, listener: any, useCapture: any): void;

            function addListener(type: any, listener: any): any;

            function close(code: any, reason: any): void;

            function dispatchEvent(event: any): void;

            function emit(type: any, ...args: any[]): any;

            function end(data: any): void;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function pause(): any;

            function ping(message: any, callback: any): any;

            function pipe(dest: any, options: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeEventListener(eventType: any, listener: any, useCapture: any): void;

            function removeListener(type: any, listener: any): any;

            function resume(): any;

            function send(data: any): any;

            function setMaxListeners(n: any): any;

            function write(data: any): any;

            namespace addEventListener {
                const prototype: {
                };

            }

            namespace addListener {
                const prototype: {
                };

            }

            namespace close {
                const prototype: {
                };

            }

            namespace dispatchEvent {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace end {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pause {
                const prototype: {
                };

            }

            namespace ping {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeEventListener {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace send {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace write {
                const prototype: {
                };

            }

        }

    }

    namespace EventSource {
        namespace isEventSource {
            const prototype: {
            };

        }

        namespace prototype {
            const DEFAULT_PING: number;

            const DEFAULT_RETRY: number;

            const domain: any;

            const onclose: any;

            const onerror: any;

            const onmessage: any;

            const onopen: any;

            function addEventListener(eventType: any, listener: any, useCapture: any): void;

            function addListener(type: any, listener: any): any;

            function close(): any;

            function dispatchEvent(event: any): void;

            function emit(type: any, ...args: any[]): any;

            function end(message: any): void;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function ping(): any;

            function pipe(dest: any, options: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeEventListener(eventType: any, listener: any, useCapture: any): void;

            function removeListener(type: any, listener: any): any;

            function send(message: any, options: any): any;

            function setMaxListeners(n: any): any;

            function write(message: any): any;

            namespace addEventListener {
                const prototype: {
                };

            }

            namespace addListener {
                const prototype: {
                };

            }

            namespace close {
                const prototype: {
                };

            }

            namespace dispatchEvent {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace end {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace ping {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeEventListener {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace send {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace write {
                const prototype: {
                };

            }

        }

    }

    namespace isWebSocket {
        const prototype: {
        };

    }

    namespace prototype {
        const domain: any;

        const onclose: any;

        const onerror: any;

        const onmessage: any;

        const onopen: any;

        function addEventListener(eventType: any, listener: any, useCapture: any): void;

        function addListener(type: any, listener: any): any;

        function close(code: any, reason: any): void;

        function dispatchEvent(event: any): void;

        function emit(type: any, ...args: any[]): any;

        function end(data: any): void;

        function eventNames(): any;

        function getMaxListeners(): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function pause(): any;

        function ping(message: any, callback: any): any;

        function pipe(dest: any, options: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeEventListener(eventType: any, listener: any, useCapture: any): void;

        function removeListener(type: any, listener: any): any;

        function resume(): any;

        function send(data: any): any;

        function setMaxListeners(n: any): any;

        function write(data: any): any;

        namespace addEventListener {
            const prototype: {
            };

        }

        namespace addListener {
            const prototype: {
            };

        }

        namespace close {
            const prototype: {
            };

        }

        namespace dispatchEvent {
            const prototype: {
            };

        }

        namespace emit {
            const prototype: {
            };

        }

        namespace end {
            const prototype: {
            };

        }

        namespace eventNames {
            const prototype: {
            };

        }

        namespace getMaxListeners {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace listeners {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace once {
            const prototype: {
            };

        }

        namespace pause {
            const prototype: {
            };

        }

        namespace ping {
            const prototype: {
            };

        }

        namespace pipe {
            const prototype: {
            };

        }

        namespace prependListener {
            const prototype: {
            };

        }

        namespace prependOnceListener {
            const prototype: {
            };

        }

        namespace removeAllListeners {
            const prototype: {
            };

        }

        namespace removeEventListener {
            const prototype: {
            };

        }

        namespace removeListener {
            const prototype: {
            };

        }

        namespace resume {
            const prototype: {
            };

        }

        namespace send {
            const prototype: {
            };

        }

        namespace setMaxListeners {
            const prototype: {
            };

        }

        namespace write {
            const prototype: {
            };

        }

    }

    namespace validateOptions {
        const prototype: {
        };

    }

}

